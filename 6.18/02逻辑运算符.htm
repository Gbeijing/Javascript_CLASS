<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <script>
        /* && 运算符
         1.从左向右依次运算，第一个是true进行下一个，遇到false返回false
            如果都是true，则返回true或者最后一表达式返回结果，最后如果是js 数据直接返回数据


*/
        // 复杂表达式  包含多种类运算符
        var res = 2>1 && null==null &&2-1
        var RES1 = ''==[]&& 'a'<'y'&& []>{}
        var res2 = []===''&&(1+2)*1&&'a'>'b'
            //res2 = false&&3&&true
            //res2 = false 
        var res3 = 'gukun' && {} && 123 
        console.log(res3)

        // var a = 20
        // var res4 = (a % 4 == 0 && a % 100 !=0)&&a %400 ==0
        //    res4 = (0 == 0 && 20 != 0)&& 20 ==0
        //    res4 =true&&false
        //    false

            //   var a = 20;
            //   var res = (a % 4 == 0 && a % 100 != 0)&& a % 400 == 0;
            //       res = (0 == 0 && 20 % 100 != 0)&& 20 % 400 == 0;
            //       res = (true && 20 % 100 != 0)&& 20 % 400 == 0;
            //       res = (true && 20 != 0)&& 20 % 400 == 0;
            //       res = (true && true)&& 20 % 400 == 0;
            //       res = true && 20 % 400 == 0;
            //       res = true && 20 == 0;
            //       res = true && false;
            //       res = false

            /*
                || 运算符 预算顺序是
                1.从左向右一次运算，第一个是false 进行下一个，遇到第一个true则返回true
                    如果没有true则返回最后一个算术的运算结果  最后如果是js数据直接返回数据

            */
        //     var a = 20
        // var res =  (a % 4 == 0 || a % 100 != 0) || a % 400 == 0;
        //     res =  (20 % 4 == 0 || 20 % 100 != 0) || 20 % 400 == 0;
        //     res =  (true == 0 || 20 % 100 != 0) || 20 % 400 == 0;
        //     res =  (true || 20% 100 != 0) || 20 % 400 == 0;
        //     res =  (true) || 20 % 400 == 0;
        //     res =  true || 20 % 400 == 0;
        //     res = true

        var res5 = undefined || null || false || '' || 0 || true;   
        console.log(res5)



        // ! 是单目运算，只有两个结果 true 和 false
        // 所以：数据类型的隐士转化，也应该是boolean
        // 第一：
        // 第二
        // 第三

        var res = 1+ 2 +!0 
            // res = 1+ 2 +true 
            // res = 4
        var res1 = !1
            // res1 = !true
            // res1 = false
        var res2 = !'sss'
            // res2 = !true
            // res2 = false 
        var res3 = !null
            // res3 = !false 
            // res3 = true 
        var rea4 = !undefined
            // res4 = !false 
            // res4 = true 
        var res5 = !''
            // res5 = !false 
            // res5 = true

        var rea6 = !NaN
            // res6 = !false
            // res6 = true

        var res7 = 2 - !'ddd'
            // res7 = 2 - !true
            // res7 = 2 - false 
            // res7 = 2 - 0
            // res7 = 2
        console.log(res7)

        var res9 = 1 + !'' +3-1+''
            // res9 = 1+true+3-1+''
            // res9 = 1+1+3-1+''
            // res9 =4+'' 
            // res9 ='4'
        console.log(res9)
        var res8 = {} > [] && 2>1 || 'dd'>'aa' || !''
            // res8 = '[ObjectObject]'>'' && 2>1 || 'dd'>'aa' || !''    注意；{}>[] 非空字符大于空字符
            // res8 = true && 2>1 || 'dd'>'aa' || !''
            // res8 = true && true || 'dd'>'aa' || !''
            // res8 = true || 'dd'>'aa' || !''
            // res8 = true
        
        var res11 = ('aa'>'') &&!(1<2 || 1-1&&[]>{}) &&(''==[])
            // res = true&&!(<2 || 1-1&&[]>{}) &&(''==[])
            // res = true&&!(true ||1 - 1&& flase)&&true
            // res = true&&!(true || 0 && flase)&&true
            // res = true &&!(true || false && flase )&&true           注意：与优先级大于非
            // res = true &&!true&&true
            // res = true && false&&true
            // res = false
        console.log(res11)

    </script>
</body>
</html>